// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: prime.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeServiceClient is the client API for PrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeServiceClient interface {
	Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (*PrimeResponse, error)
}

type primeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeServiceClient(cc grpc.ClientConnInterface) PrimeServiceClient {
	return &primeServiceClient{cc}
}

func (c *primeServiceClient) Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (*PrimeResponse, error) {
	out := new(PrimeResponse)
	err := c.cc.Invoke(ctx, "/calculator.PrimeService/Prime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimeServiceServer is the server API for PrimeService service.
// All implementations must embed UnimplementedPrimeServiceServer
// for forward compatibility
type PrimeServiceServer interface {
	Prime(context.Context, *PrimeRequest) (*PrimeResponse, error)
	mustEmbedUnimplementedPrimeServiceServer()
}

// UnimplementedPrimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeServiceServer struct {
}

func (UnimplementedPrimeServiceServer) Prime(context.Context, *PrimeRequest) (*PrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prime not implemented")
}
func (UnimplementedPrimeServiceServer) mustEmbedUnimplementedPrimeServiceServer() {}

// UnsafePrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeServiceServer will
// result in compilation errors.
type UnsafePrimeServiceServer interface {
	mustEmbedUnimplementedPrimeServiceServer()
}

func RegisterPrimeServiceServer(s grpc.ServiceRegistrar, srv PrimeServiceServer) {
	s.RegisterService(&PrimeService_ServiceDesc, srv)
}

func _PrimeService_Prime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimeServiceServer).Prime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.PrimeService/Prime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimeServiceServer).Prime(ctx, req.(*PrimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimeService_ServiceDesc is the grpc.ServiceDesc for PrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.PrimeService",
	HandlerType: (*PrimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prime",
			Handler:    _PrimeService_Prime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prime.proto",
}
